openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'FreeLancer Alpha'
  description: 'A website where organizations can publish projects to be outsourced to freelancers. Freelancers can bid on projects to work on them. '
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/swagdhi/FreeLancerPro/1.0.0
  - description: Deploy the app from Github repo
    url: http://localhost:9678
 
 #so I need to add skills to user and project schema and example


components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        email:
          type: string
    
    Employer:
      type: object
      properties:
        companyid:  
          type: string
        password:
          type: string
        name: 
          type: string
        contact:
          type: string
        email:
         type: string
        address:
          type: string

    Project:
      type: object
      properties:
        projectID:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: 
            - accepted
            - ongoing
            - inactive

    Error:
      type: object

  responses:
    '401':
      description: Request full of errors.
    '402':
      description: API limit reached
    '403':
      description: No access to the resources.
    '404':
      description: Not found. Server did not find matching request.
    '406':
      description: Request did not validate.
    '407':
      description: Server unavailable. Try Later.

  examples:
    User:
      value:
        username: test
        password: 2349087seiweruka
        name: John Doe
        email: john.doe@domain.com

    Employer:
      value:
        companyid: we_work
        password: 034098sdfoiszerl
        name: WeWork
        email: jane.doe@wework.com

    Project:
      value:
        projectId: companyName.projectName
        name: Pied Piper
        password: 09812309sduio
        companyid: WeWork
        status: inactive

    
    Error:
      value:
        display: Error - internet connection is bad.
        code: 404

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
- bearerAuth: []
    
paths:
  /register/user:
    post:
      operationId: addUser
      tags:
        - user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                $ref: '#/components/schemas/User'

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Error'
              example: 
                $ref: '#/components/examples/Error'

      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              example:
                $ref: '#/components/examples/User'

    get:
      operationId: displayRegisterUserForm
      tags:
        - user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                $ref: '#/components/examples/User'

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Error'
              example:
                $ref: '#/components/examples/Error'
       
    put:
      operationId: updateUser
      tags: 
        - user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/User'
              example:
                $ref: '#/components/examples/User'      

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /register/employer:
    post:
      operationId: addEmployer
      tags:
        - employer
      responses:
        '203': 
          description: Success
      requestBody:
        description: Retuerns the registers employer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employer'
            example:
              $ref: '#/components/examples/Employer'

  '/projects/{projectID}':
    get:
      operationId: displayProject
      tags:
        - project
        - user
        - employer
      responses:
        '202':
          description: Success
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: string
          description: The Project ID

  '/user/{username}/profile':
    get:
      operationId: displayUserProfile
      tags:
        - user
      responses:
        '200':
          description: Successfully geting user profile
      parameters:
        - description: user identifier
          in: path
          name: username
          schema:
            type: string
          required: true

  /me:
    get:
      operationId: Displays user's own profile
      tags:
        - user
        - employer
      responses:
        '200':
          description: Success
      parameters:
        - in: header
          required: true
          name: username
          schema:
            type: string
        - in : header
          required: true
          name: type
          schema:
            type: boolean

  /me/bidProject:
    put:
      operationId: addProject
      tags:
        - employer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              example: 
                $ref: '#/components/examples/Project'

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Error'
              example:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Allows freelancers to bid on project
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
            example: 
              $ref: '#/components/examples/Project'
      parameters:
        - in: header 
          name: type
          schema: 
            type: boolean
          required: true

  /me/createProject:
    put:
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              example: 
                $ref: '#/components/examples/Project'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Error'
              example:
                $ref: '#/components/schemas/Error'
      requestBody:
        description: Allows an Employer to add new projects for bidding
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
            example: 
              $ref: '#/components/examples/Project'
      parameters:
        - in: header 
          name: type
          schema: 
            type: boolean
          required: true
 